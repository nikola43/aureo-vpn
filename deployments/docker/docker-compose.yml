version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aureo-vpn-db
    environment:
      POSTGRES_DB: aureo_vpn
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aureo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: aureo-vpn-redis
    ports:
      - "6379:6379"
    networks:
      - aureo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.api-gateway
    container_name: aureo-vpn-api
    environment:
      PORT: "8080"
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: aureo_vpn
      DB_SSL_MODE: disable
      JWT_SECRET: "your-super-secret-jwt-key-change-in-production"
      REDIS_HOST: redis
      REDIS_PORT: "6379"
    ports:
      - "8080:8080"
    volumes:
      - /opt/aureo-vpn:/opt/aureo-vpn:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aureo-network
    restart: unless-stopped

  # Control Server
  control-server:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.control-server
    container_name: aureo-vpn-control
    environment:
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: aureo_vpn
      DB_SSL_MODE: disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - aureo-network
    restart: unless-stopped

  # VPN Node (example - deploy multiple with different configs)
  vpn-node-1:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.vpn-node
    container_name: aureo-vpn-node-1
    privileged: true
    environment:
      NODE_ID: "${NODE_ID_1}"
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: aureo_vpn
      DB_SSL_MODE: disable
    depends_on:
      postgres:
        condition: service_healthy
      control-server:
        condition: service_started
    networks:
      - aureo-network
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    devices:
      - /dev/net/tun
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1
    ports:
      - "51820:51820/udp"  # WireGuard
      - "1194:1194/udp"    # OpenVPN
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: aureo-vpn-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - aureo-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: aureo-vpn-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: ""
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - aureo-network
    restart: unless-stopped

  # Operator Dashboard
  dashboard:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.dashboard
      args:
        VITE_API_URL: /api/v1
    container_name: aureo-vpn-dashboard
    ports:
      - "3001:80"
    depends_on:
      - api-gateway
    networks:
      - aureo-network
    restart: unless-stopped

networks:
  aureo-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
